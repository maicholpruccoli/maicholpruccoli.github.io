{"version":3,"file":"462.40f3fbc785f4d48c.js","mappings":"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","names":["i0","$event","_r3","ctx_r2","emailCodice","ctx_r4","login","ctx_r5","passwordCognome","ctx_r6","ctx_r7","accessoConCodice","ctx_r8","ctx_r9","ctx_r10","recuperoPassword","ctx_r0","_r13","_r11","ctx_r12","recuperaPassword","value","ctx_r14","ctx_r15","ctx_r1","MySelfLoginComponent","BaseComponent","constructor","_authService","route","router","apiService","localizationService","utility","super","this","isLoginInCorso","ngOnInit","sub","queryParamMap","subscribe","x","oidAlbergo","get","oidPortale","lingua","email","codicePrenotazione","password","cognome","languages","find","language","codice","setDefaultLang","isNaN","setIsLoading","checkPortale","res","data","success","navigate","then","checkAlbergo","backgroundImage","getRandomImage","loginMySelf","portaleXAlbergo","oid","queryParams","showError","rq","RecuperaPasswordRQ","showInfo","ngOnDestroy","unsubscribe","t","i1","i2","i3","i4","i5","core","Xpm","selectors","features","decls","vars","consts","template","rf","ctx","MySelfLoginComponent_ng_container_2_Template","MySelfLoginComponent_ng_container_3_Template","routes","path","component","MySelfComponent","canActivate","authGuard","MySelfRoutingModule","oAB","cJS","RouterModule","forChild","MySelfModule","headerService","cssLoaderService","sessionService","hideHeader","unloadCssDms","isAttachRequestHeaders","CommonModule","SharedModule","InterfacesModule","MySelfSharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/my-self/my-self-login/my-self-login.component.html","./src/app/my-self/my-self-login/my-self-login.component.ts","./src/app/my-self/my-self-routing.module.ts","./src/app/my-self/my-self.module.ts"],"sourcesContent":["<div id=\"login-myself\" class=\"container-fluid w-100 h-100 pr-3 pl-3 position-absolute\" [style.backgroundImage]=\"backgroundImage\">\r\n    <div class=\"mx-auto border mat-elevation-z10 container-fluid p-3 login-container\">\r\n        <ng-container *ngIf=\"!recuperoPassword\">\r\n            <mat-form-field class=\"w-100\">\r\n                <input autocompleteOff matInput [placeholder]=\"(accessoConCodice ? 'myself.login.codicePrenotazione' : 'myself.login.email') | translate\" [(ngModel)]=\"emailCodice\" required (keyup.enter)=\"login()\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field class=\"w-100\">\r\n                <input autocompleteOff matInput [type]=\"accessoConCodice ? 'text' : 'password'\" [placeholder]=\"(accessoConCodice ? 'myself.login.cognome' : 'myself.login.password') | translate\" [(ngModel)]=\"passwordCognome\" required (keyup.enter)=\"login()\">\r\n            </mat-form-field>\r\n\r\n            <mat-checkbox [(ngModel)]=\"accessoConCodice\" (change)=\"emailCodice = ''; passwordCognome = '';\">\r\n                {{ 'myself.login.accessoConCodice' | translate}}\r\n            </mat-checkbox>\r\n\r\n            <button class=\"w-100 mt-1 button-blue\" mat-flat-button (click)=\"login()\">{{ 'myself.login.login' | translate}}</button>\r\n            <button class=\"w-100 mt-1 button-blue\" mat-flat-button (click)=\"recuperoPassword = true\">{{ 'myself.login.passwordDimenticata' | translate}}</button>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"recuperoPassword\">\r\n            <h4 class=\"mb-4 text-center\">{{'myself.recuperaPassword' | translate}}</h4>\r\n\r\n            <mat-form-field class=\"w-100\">\r\n                <input autocompleteOff #emailRecupero matInput [placeholder]=\"'myself.login.email' | translate\" [value]=\"!!emailCodice ? emailCodice : ''\" required (keyup.enter)=\"recuperaPassword(emailRecupero.value)\">\r\n            </mat-form-field>\r\n\r\n            <button class=\"mr-1 w-100 mt-2 button-blue\" mat-flat-button (click)=\"recuperaPassword(emailRecupero.value)\">{{ 'globals.conferma' | translate}}</button>\r\n            <button class=\"w-100 mt-1 button-blue\" mat-flat-button (click)=\"recuperoPassword = false\">{{ 'globals.annulla' | translate}}</button>\r\n        </ng-container>\r\n    </div>\r\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n  AuthenticateMySelf,\r\n  CheckAlbergoRS,\r\n  CheckPortaleRS,\r\n  RecuperaPasswordRQ,\r\n  RecuperaPasswordRS,\r\n} from 'src/app/shared/models/dto';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { LocalizationService } from 'src/app/shared/services/localization.service';\r\nimport { UtilityService } from 'src/app/shared/services/utility.service';\r\n\r\nimport { AuthenticationService } from '../../core/auth/authentication.service';\r\nimport { BaseComponent } from '../../interfaces/base-component/base-component';\r\n\r\n@Component({\r\n  selector: 'app-my-self-login',\r\n  templateUrl: './my-self-login.component.html',\r\n  styleUrls: ['./my-self-login.component.scss']\r\n})\r\nexport class MySelfLoginComponent extends BaseComponent implements OnInit, OnDestroy {\r\n\r\n  public sub: any;\r\n  public oidAlbergo: number;\r\n  public oidPortale: number;\r\n  public recuperoPassword: boolean = false;\r\n  public emailCodice: string;\r\n  public passwordCognome: string;\r\n  public accessoConCodice: boolean = true;\r\n  public backgroundImage: string;\r\n  public isLoginInCorso: boolean = false;\r\n\r\n  constructor(private _authService: AuthenticationService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private apiService: ApiService,\r\n    private localizationService: LocalizationService,\r\n    private utility: UtilityService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sub = this.route.queryParamMap.subscribe(x => {\r\n      let oidAlbergo = x.get('oidAlbergo');\r\n      let oidPortale = x.get('oidPortale');\r\n      let lingua = x.get('lingua');\r\n      let email = x.get('email');\r\n      let codicePrenotazione = x.get('codicePrenotazione');\r\n      let password = x.get('password');\r\n      let cognome = x.get('cognome');\r\n\r\n      if (!!email || !!password) {\r\n        this.accessoConCodice = false;\r\n        this.emailCodice = email;\r\n        this.passwordCognome = password;\r\n      } else if (!!codicePrenotazione || !!cognome) {\r\n        this.accessoConCodice = true;\r\n        this.emailCodice = codicePrenotazione;\r\n        this.passwordCognome = cognome;\r\n      }\r\n\r\n      if (!!lingua) {\r\n        let l = this.localizationService.languages.find(language => language.codice == lingua);\r\n\r\n        if (l != null) {\r\n          this.localizationService.setDefaultLang(lingua);\r\n        }\r\n      }\r\n\r\n      if ((!!oidAlbergo && !isNaN(+oidAlbergo)) || (!!oidPortale && !isNaN(+oidPortale))) {\r\n        this.setIsLoading(true);\r\n\r\n        if ((!!oidPortale && !isNaN(+oidPortale))) {\r\n          this.apiService.checkPortale(+oidPortale).subscribe((res: CheckPortaleRS) => {\r\n            if (res.data.success && res.data.oidAlbergo > 0) {\r\n              this.oidPortale = +oidPortale;\r\n              this.oidAlbergo = res.data.oidAlbergo;\r\n\r\n              if (!!this.emailCodice && !!this.passwordCognome) {\r\n                this.login();\r\n              } else {\r\n                this.setIsLoading(false);\r\n              }\r\n            } else {\r\n              this.router.navigate(['sbm']).then(() => {\r\n                this.setIsLoading(false);\r\n              });\r\n            }\r\n          });\r\n        } else {\r\n          this.apiService.checkAlbergo(+oidAlbergo).subscribe((res: CheckAlbergoRS) => {\r\n            if (res.data.success) {\r\n              this.oidAlbergo = +oidAlbergo;\r\n\r\n              if (!!this.emailCodice && !!this.passwordCognome) {\r\n                this.login();\r\n              } else {\r\n                this.setIsLoading(false);\r\n              }\r\n            } else {\r\n              this.router.navigate(['sbm']).then(() => {\r\n                this.setIsLoading(false);\r\n              });\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        this.router.navigate(['sbm']);\r\n      }\r\n    });\r\n\r\n    this.backgroundImage = this.utility.getRandomImage();\r\n  }\r\n\r\n  login() {\r\n    if (!this.isLoginInCorso) {\r\n      if (!!this.emailCodice && !!this.passwordCognome) {\r\n        let email: string = null;\r\n        let codicePrenotazione: string = null;\r\n        let password: string = null;\r\n        let cognome: string = null;\r\n\r\n        if (this.accessoConCodice) {\r\n          codicePrenotazione = this.emailCodice;\r\n          cognome = this.passwordCognome;\r\n        } else {\r\n          email = this.emailCodice;\r\n          password = this.passwordCognome;\r\n        }\r\n\r\n        this.setIsLoading(true);\r\n\r\n        this.isLoginInCorso = true;\r\n\r\n        this._authService.loginMySelf(true, this.oidAlbergo, this.oidPortale, email, password, cognome, codicePrenotazione).then((res: AuthenticateMySelf) => {\r\n          this.isLoginInCorso = false;\r\n\r\n          //se nell'autenticazione mi torna il portale uso quello\r\n          //in caso di installazioni con piu piu portali e il cliente prenota su uno\r\n          if (res != null && res.portaleXAlbergo != null) {\r\n            this.oidPortale = res.portaleXAlbergo.oid;\r\n          }\r\n\r\n          if (this.oidPortale != null) {\r\n            this.router.navigate(['self-checkin/home'], { queryParams: { oidPortale: this.oidPortale } }).then(() => this.setIsLoading(false));\r\n          } else {\r\n            this.router.navigate(['self-checkin/home']).then(() => this.setIsLoading(false));\r\n          }\r\n        }, () => { this.isLoginInCorso = false; });\r\n      } else {\r\n        this.showError('globals.messages.inserireDati');\r\n      }\r\n    }\r\n  }\r\n\r\n  recuperaPassword(email: string) {\r\n    if (!!email) {\r\n      this.setIsLoading(true);\r\n\r\n      let rq = new RecuperaPasswordRQ();\r\n      rq.email = email;\r\n      rq.oidAlbergo = this.oidAlbergo;\r\n\r\n      this.apiService.recuperaPassword(rq).subscribe((res: RecuperaPasswordRS) => {\r\n        this.setIsLoading(false);\r\n\r\n        if (res.data.success) {\r\n          this.showInfo('myself.emailInviata').then(() => {\r\n            this.recuperoPassword = false;\r\n          });\r\n        } else {\r\n          this.showError('myself.erroreRecuperoPassword').then(() => {\r\n            this.recuperoPassword = false;\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.showError('globals.messages.inserireDati');\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { authGuard } from '../core/auth/authguard';\r\nimport { MySelfComponent } from '../my-self-shared/my-self/my-self.component';\r\nimport { MySelfLoginComponent } from './my-self-login/my-self-login.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: \"\",\r\n        component: MySelfLoginComponent\r\n    },\r\n    {\r\n        path: \"home\",\r\n        component: MySelfComponent,\r\n        canActivate: [authGuard]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\n\r\nexport class MySelfRoutingModule { }","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { SessionService } from '../core/session.service';\r\nimport { InterfacesModule } from '../interfaces/interfaces.module';\r\nimport { MySelfSharedModule } from '../my-self-shared/my-self-shared.module';\r\nimport { CssLoaderService } from '../shared/services/css-loader.service';\r\nimport { HeaderService } from '../shared/services/header.service';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { MySelfLoginComponent } from './my-self-login/my-self-login.component';\r\nimport { MySelfRoutingModule } from './my-self-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MySelfLoginComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    InterfacesModule,\r\n    MySelfSharedModule,\r\n    MySelfRoutingModule\r\n  ]\r\n})\r\n\r\nexport class MySelfModule {\r\n  constructor(private headerService: HeaderService,\r\n    private cssLoaderService: CssLoaderService,\r\n    private sessionService: SessionService) {\r\n    this.headerService.hideHeader();\r\n    this.cssLoaderService.unloadCssDms();\r\n    this.sessionService.isAttachRequestHeaders = false;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}