{"version":3,"file":"common.f30ff18211337126.js","mappings":"iLAMO,MAAMA,EAA2BA,CAACC,EAA+BC,KACtE,IAAIC,KAAiBC,OAAOC,KACxBC,KAASF,OAAOG,MAChBC,KAAeJ,OAAOK,KAK1B,GAFAN,EAAeO,SAAWF,EAAaG,IAAIR,EAAeS,aAEtDT,EAAeO,SAAU,CAC3B,GAAIP,EAAeO,SAASG,SAAWV,EAAeO,SAASI,UAAYZ,EAAMa,IAAIC,WAAW,QAC9F,OAA+C,MAA3Cb,EAAeO,SAASG,OAAOI,UAAsE,GAAlDd,EAAeO,SAASG,OAAOI,SAASC,SAGzE,cAAhBjB,EAAMkB,SACHhB,EAAeO,SAASG,OAAOI,SAASG,SAASnB,EAAMoB,YAAYC,QAGtEhB,EAAOiB,SAAS,CAAC,SACV,IAMR,GAAIpB,EAAeO,SAASc,eAAiBrB,EAAeO,SAASI,WAAaZ,EAAMa,IAAIC,WAAW,kBAAoBd,EAAMa,IAAIC,WAAW,YACrJ,OAAO,EAIL,GAFEd,EAAMa,IAAIC,WAAW,SACvBV,EAAOiB,SAAS,CAAC,QACbrB,EAAMa,IAAIC,WAAW,iBAAkB,CAC3C,IAAIS,EAAqBtB,EAAeuB,gBAEpCD,EAAa,EACfnB,EAAOiB,SAAS,CAAC,gBAAiB,CAAEI,YAAa,CAAEF,WAAYA,KAE/DnB,EAAOiB,SAAS,CAAC,OAAM,SAEhBrB,EAAMa,IAAIC,WAAW,WAAY,CAC1C,IAAIY,EAAqB3B,EAAM4B,cAAclB,IAAI,sBAE3CiB,IAAuBE,OAAOF,KAAwBA,EAAqB,EAC/EtB,EAAOiB,SAAS,CAAC,UAAW,CAAEI,YAAa,CAAEC,mBAAoBA,KAEjEtB,EAAOiB,SAAS,CAAC,OAAM,CAI3B,OAAO,EAGTjB,SAAOiB,SAAS,CAAC,SACV,GAIEQ,EAAqCA,CAACC,EAAoC9B,IAA+BF,EAAUgC,EAAY9B","names":["authGuard","route","state","sessionService","inject","SessionService","router","Router","localStorage","LocalStorageService","sessione","get","SESSION_KEY","utente","isMySelf","url","startsWith","permessi","length","outlet","includes","routeConfig","path","navigate","clienteMySelf","oidAlbergo","getOidAlbergo","queryParams","oidUbicazioneIstat","queryParamMap","isNaN","authGuardChild","childRoute"],"sourceRoot":"webpack:///","sources":["./src/app/core/auth/authguard.ts"],"sourcesContent":["import { inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivateChildFn, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { LocalStorageService } from '../local-storage.service';\r\nimport { SessionService } from '../session.service';\r\n\r\nexport const authGuard: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\r\n  let sessionService = inject(SessionService);\r\n  let router = inject(Router);\r\n  let localStorage = inject(LocalStorageService);\r\n\r\n  //DA CONTROLLARE (AGGIORNAMENTO SESSIONE PER CONTROLLARE LOGIN MYSELF/SELCHECKIN)\r\n  sessionService.sessione = localStorage.get(sessionService.SESSION_KEY);\r\n\r\n  if (sessionService.sessione) {\r\n    if (sessionService.sessione.utente && !sessionService.sessione.isMySelf && state.url.startsWith('/sbm')) {\r\n      if (sessionService.sessione.utente.permessi == null || sessionService.sessione.utente.permessi.length == 0) {\r\n        return true;\r\n      } else {\r\n        if (route.outlet == 'homeOutlet') {\r\n          if (!sessionService.sessione.utente.permessi.includes(route.routeConfig.path)) {\r\n            return true;\r\n          } else {\r\n            router.navigate(['sbm']);\r\n            return false;\r\n          }\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n    } else if (sessionService.sessione.clienteMySelf && sessionService.sessione.isMySelf && (state.url.startsWith('/self-checkin') || state.url.startsWith('/myself'))) {\r\n      return true;\r\n    } else {\r\n      if (state.url.startsWith('/sbm')) {\r\n        router.navigate(['sbm']);\r\n      } if (state.url.startsWith('/self-checkin')) {\r\n        let oidAlbergo: number = sessionService.getOidAlbergo();\r\n\r\n        if (oidAlbergo > 0) {\r\n          router.navigate(['self-checkin'], { queryParams: { oidAlbergo: oidAlbergo } });\r\n        } else {\r\n          router.navigate(['sbm']);\r\n        }\r\n      } else if (state.url.startsWith('/myself')) {\r\n        let oidUbicazioneIstat = route.queryParamMap.get('oidUbicazioneIstat');\r\n\r\n        if (!!oidUbicazioneIstat && !isNaN(+oidUbicazioneIstat) && +oidUbicazioneIstat > 0) {\r\n          router.navigate(['myself'], { queryParams: { oidUbicazioneIstat: oidUbicazioneIstat } });\r\n        } else {\r\n          router.navigate(['sbm']);\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n  } else {\r\n    router.navigate(['sbm']);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const authGuardChild: CanActivateChildFn = (childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot) => authGuard(childRoute, state);"],"x_google_ignoreList":[]}